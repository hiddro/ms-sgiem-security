openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger Security Proyecto SGIEM - UTP
  license:
    name: MIT
servers:
  - url: http://localhost:8080/
tags:
  - name: user
    description: Everything about your Users
  - name: rol
    description: Everything about your Rols
  - name: token
    description: Operations wiht the Token
paths:
  /user:
    get:
      summary: List all users
      description: Return list Users
      operationId: listUsers
      tags:
        - user
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/search-state/{state}:
    get:
      summary: List all users for state
      description: Return list Users for state
      operationId: listUserState
      tags:
        - user
      parameters:
        - name: state
          in: path
          description: state user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/search-code/{code}:
    get:
      summary: Find by user for code
      description: Return user for code
      operationId: getUserCode
      tags:
        - user
      parameters:
        - name: code
          in: path
          description: state user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/register:
    post:
      summary: Create a user
      description: Add a new User
      operationId: registerUser
      tags:
        - user
      requestBody:
        description: Create a new user in the SGIEM
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/assign/{titulo}/{code}:
    put:
      tags:
        - user
      summary: Assign user added rol
      description: This can only be done by the logged in user.
      operationId: assignUser
      parameters:
        - name: titulo
          in: path
          description: titulo that need to be added
          required: true
          schema:
            type: string
        - name: code
          in: path
          description: code user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/password/{code}:
    put:
      tags:
        - user
      summary: Reset password to User
      description: This can only be done by the logged in user.
      operationId: resetPassword
      parameters:
        - name: code
          in: path
          description: code user
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent password the user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/state/{code}:
    put:
      tags:
        - user
      summary: change state of user
      description: This can only be done by the logged in user.
      operationId: changeState
      parameters:
        - name: code
          in: path
          description: code user
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /rol:
    get:
      summary: List all rols
      description: Return list Rols
      operationId: listRols
      tags:
        - rol
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /rol/{titulo}:
    get:
      summary: List all rols for titulo
      description: Return list Rols for titulo
      operationId: listRolsTitulo
      tags:
        - rol
      parameters:
        - name: titulo
          in: path
          description: titulo rol
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolResponse'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RolResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /token:
    post:
      summary: Obteined Token of User
      description: Get Token
      operationId: getToken
      tags:
        - token
      requestBody:
        description: Generate Token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/AuthRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthRequest'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    UserRequest:
      type: object
      required:
        - names
        - email
        - surenames
        - password
        - code
      properties:
        names:
          type: string
          example: James
        surenames:
          type: string
          example: Gosling May
        code:
          type: string
          example: FFFFFFFF
        email:
          type: string
          example: james@gmail.com
        password:
          type: string
          example: 12345
    UserResponse:
      type: object
      properties:
        idUser:
          type: integer
          format: int32
          example: 1
        names:
          type: string
          example: James
        surenames:
          type: string
          example: Gosling May
        code:
          type: string
          example: FFFFFFFF
        email:
          type: string
          example: james@gmail.com
        state:
          type: string
          example: ACTIVO
          enum:
            - ACTIVO
            - INACTIVO
        createTime:
          type: string
          format: date
          pattern: '^(\\d{4})-(\\d{2})-(\\d{2})$'
          example: '31-12-2023'
        updateTime:
          type: string
          format: date
          pattern: '^(\\d{4})-(\\d{2})-(\\d{2})$'
          example: '31-12-2023'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RolDetails'
    RolDetails:
      type: object
      properties:
        idRol:
          type: integer
          format: int32
          example: 1
        titulo:
          type: string
          example: USER
          enum:
            - REHU
            - USER
            - ADMIN
        idUser:
          type: integer
          format: int32
          example: 1
    PasswordRequest:
      type: object
      required:
        - titulo
      properties:
        password:
          type: string
          example: 12345
    RolResponse:
      type: object
      properties:
        idRol:
          type: integer
          format: int32
          example: 1
        titulo:
          type: string
          example: USER
          enum:
            - REHU
            - USER
            - ADMIN
        idUser:
          type: integer
          format: int32
          example: 1
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          example: james@gmail.com
        password:
          type: string
          example: 12345
    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: "abcdefgh12345..."
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string